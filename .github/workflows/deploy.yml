# .github/workflows/deploy.yml (Version Simplifiée - Laisser Oryx Gérer)
name: Deploy Python FastAPI App (Baseline - Oryx Build) to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  # API_SOURCE_DIR: '${{ github.workspace }}/api' # Moins utile maintenant
  DEPLOY_PACKAGE_NAME: 'api_deploy_package.zip' # Garder si on veut zipper

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # --- ÉTAPES VENV SUPPRIMÉES ---

    # --- Optionnel: Exécuter les tests (nécessite d'installer les deps ici) ---
    - name: Install test dependencies and Run tests
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt # Installer les dépendances POUR les tests
        # Si spaCy est nécessaire pour les tests (peu probable), le télécharger ici
        # python -m spacy download en_core_web_sm
        pytest api/tests/ # Exécuter les tests

    # --- MODIFIÉ : Créer l'archive ZIP avec SEULEMENT le code source ---
    - name: Create deployment package (Source Only)
      run: |
        echo "Création de l'archive ZIP (Source API) pour le déploiement..."
        mkdir deploy_package
        # Copier les fichiers de code/config/modèle de l'API
        cp api/main.py deploy_package/
        cp api/requirements.txt deploy_package/
        cp api/baseline_pipeline.joblib deploy_package/
        # NE PAS COPIER tests/ ou venv/ ou __pycache__/ etc.
        echo "Contenu du package à zipper :"
        ls -l deploy_package/
        cd deploy_package
        zip -r ../${{ env.DEPLOY_PACKAGE_NAME }} .
        cd ..
        echo "Archive $DEPLOY_PACKAGE_NAME créée."

    # --- MODIFIÉ : Déployer l'archive ZIP contenant le code source ---
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'airparadis-sentiment-api'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # Déployer le ZIP du code source. Oryx devrait détecter requirements.txt dedans.
        package: '${{ env.DEPLOY_PACKAGE_NAME }}'