# .github/workflows/deploy.yml
name: Deploy Python FastAPI App to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env: # Définir des variables d'environnement pour le workflow
  PYTHON_VERSION: '3.11'
  # Nom de l'environnement virtuel DANS le runner Actions ET potentiellement sur Azure
  # Oryx cherche souvent 'antenv' par défaut sur Azure
  VENV_NAME: 'antenv'
  # Chemin où l'environnement virtuel sera créé dans le runner
  VENV_PATH: '${{ github.workspace }}/${{ env.VENV_NAME }}'
  # Dossier contenant le code source de l'API
  API_SOURCE_DIR: '${{ github.workspace }}/api'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # --- MODIFIÉ : Création et Activation VENV ---
    - name: Create and activate virtual environment
      run: |
        python -m venv ${{ env.VENV_PATH }}
        source ${{ env.VENV_PATH }}/bin/activate
        python -m pip install --upgrade pip wheel # Installer wheel est souvent bien

    # --- MODIFIÉ : Installation dans le VENV ---
    - name: Install dependencies into virtual environment
      run: |
        source ${{ env.VENV_PATH }}/bin/activate # S'assurer qu'on est dans le venv
        pip install -r ${{ env.API_SOURCE_DIR }}/requirements.txt

    - name: Download spaCy language model # Reste pareil
      run: |
         source ${{ env.VENV_PATH }}/bin/activate # Exécuter dans le venv
         python -m spacy download en_core_web_sm

    - name: List files # Reste pareil (pour debug)
      run: |
        echo "--- Listing Root Directory (${{ github.workspace }}) ---"
        ls -lR ${{ github.workspace }}
        echo "---------------------------------------"
        echo "--- Listing API Directory (${{ env.API_SOURCE_DIR }}) ---"
        ls -lR ${{ env.API_SOURCE_DIR }}
        echo "---------------------------------------"
        echo "--- Listing VENV bin (${{ env.VENV_PATH }}/bin) ---"
        ls -l ${{ env.VENV_PATH }}/bin
        echo "---------------------------------------"


    - name: Run tests # Reste pareil
      run: |
         source ${{ env.VENV_PATH }}/bin/activate # Exécuter les tests DANS le venv
         pytest ${{ env.API_SOURCE_DIR }}/tests/

    # --- MODIFIÉ : Déploiement - Informer Oryx ? ---
    # L'action webapps-deploy est censée gérer ça, mais on s'assure
    # que le déploiement inclut bien tout ce qu'il faut.
    # L'option package: './api' est peut-être le problème si Oryx attend
    # un zip ou une structure différente avec un venv.
    # Essayons de déployer la racine pour qu'Oryx puisse trouver requirements.txt
    # et potentiellement lancer le build lui-même.

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'airparadis-sentiment-api'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # --- CHANGEMENT ICI ---
        # Déployer la racine du projet au lieu de juste /api
        # Oryx devrait détecter requirements.txt dans api/ et installer
        package: '.'
        # --------------------