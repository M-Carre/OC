# Nom du workflow affiché sur GitHub Actions
name: Deploy Python FastAPI App to Azure Web App

# Déclencheurs du workflow
on:
  # Sur push vers la branche 'main'
  push:
    branches:
      - main
  # Permet aussi un déclenchement manuel depuis l'interface GitHub
  workflow_dispatch:

# Définit les jobs à exécuter
jobs:
  # Nom du job (un seul job ici)
  build-and-deploy:
    # Type de machine virtuelle à utiliser pour exécuter le job
    runs-on: ubuntu-latest

    # Séquence des étapes à exécuter dans le job
    steps:
    # Étape 1: Récupérer le code du dépôt
    - name: Checkout repository
      uses: actions/checkout@v4

    # Étape 2: Configurer l'environnement Python
    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        # Utiliser la même version majeure/mineure que celle de votre Azure Web App
        python-version: '3.11'

    # Étape 3: Installer les dépendances Python
    - name: Install dependencies
      run: |
        # Mettre à jour pip
        python -m pip install --upgrade pip
        # Installer les packages depuis le fichier requirements DANS le dossier api
        # La commande est exécutée depuis la racine du dépôt checkout
        pip install -r api/requirements.txt

    # Étape 4: Télécharger le modèle de langue spaCy
    - name: Download spaCy language model
      # Nécessaire car non inclus dans requirements.txt
      run: python -m spacy download en_core_web_sm

    # Étape 5: Lister les fichiers (Étape de Débogage)
    # Pour vérifier que les artefacts sont au bon endroit avant les tests
    - name: List files in workspace and api directory
      run: |
        echo "--- Listing Root Directory (${{ github.workspace }}) ---"
        ls -lR ${{ github.workspace }}
        echo "---------------------------------------"
        echo "--- Listing API Directory (${{ github.workspace }}/api) ---"
        ls -lR ${{ github.workspace }}/api
        echo "---------------------------------------"

    # Étape 6: Exécuter les tests unitaires
    - name: Run tests
      # Exécute pytest sur le dossier de tests de l'API
      # Le workflow échouera ici si un test échoue
      run: pytest api/tests/

    # Étape 7: Déployer sur Azure Web App
    # Cette étape ne s'exécute que si toutes les étapes précédentes ont réussi
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        # Nom exact de votre Web App créée sur Azure
        app-name: 'airparadis-sentiment-api'
        # Récupère le profil de publication depuis les secrets GitHub
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # Spécifie que le code à déployer se trouve dans le dossier './api'
        # L'action copiera le CONTENU de ce dossier à la racine de la Web App
        package: './api'