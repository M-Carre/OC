# .github/workflows/deploy.yml
name: Deploy Python FastAPI App to Azure Web App (Optimized Package) # Nom mis à jour

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  VENV_NAME: 'antenv'
  API_SOURCE_DIR: '${{ github.workspace }}/api'
  # Nom de l'archive ZIP de déploiement
  DEPLOY_PACKAGE_NAME: 'api_deploy_package.zip'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Create and activate virtual environment
      run: |
        python -m venv $VENV_NAME
        $VENV_NAME/bin/python -m pip install --upgrade pip wheel

    - name: Install dependencies into virtual environment
      run: |
        $VENV_NAME/bin/pip install -r $API_SOURCE_DIR/requirements.txt

    - name: Download spaCy language model
      run: |
        $VENV_NAME/bin/python -m spacy download en_core_web_sm

    - name: List files and venv contents # Garder pour debug si besoin
      run: |
        # ... (commandes ls inchangées) ...
        echo "--- Listing Root Directory (${{ github.workspace }}) ---"; ls -lR ${{ github.workspace }}; echo "---";
        echo "--- Listing API Directory ($API_SOURCE_DIR) ---"; ls -lR $API_SOURCE_DIR; echo "---";
        echo "--- Listing VENV bin ($VENV_NAME/bin) ---"; ls -l $VENV_NAME/bin || echo "Venv bin not found"; echo "---";


    - name: Run tests
      run: |
         $VENV_NAME/bin/pytest $API_SOURCE_DIR/tests/

    # --- NOUVELLE ÉTAPE : Créer l'archive ZIP de déploiement ---
    - name: Create deployment package
      run: |
        echo "Création de l'archive ZIP pour le déploiement..."
        # Créer un dossier temporaire pour l'archive
        mkdir deploy_package
        # Copier UNIQUEMENT les fichiers nécessaires de api/ vers ce dossier
        cp $API_SOURCE_DIR/main.py deploy_package/
        cp $API_SOURCE_DIR/requirements.txt deploy_package/
        cp $API_SOURCE_DIR/model.tflite deploy_package/
        cp $API_SOURCE_DIR/tokenizer.pkl deploy_package/
        cp $API_SOURCE_DIR/config.json deploy_package/
        # NE PAS COPIER tests/, __pycache__, Test_API.ipynb, etc.
        echo "Contenu du package à zipper :"
        ls -l deploy_package/
        # Créer l'archive ZIP depuis ce dossier temporaire
        # Le 'cd' permet de ne pas avoir le dossier 'deploy_package' dans le zip
        cd deploy_package
        zip -r ../${{ env.DEPLOY_PACKAGE_NAME }} . # Zipper le contenu du dossier courant
        cd .. # Revenir à la racine
        echo "Archive ${env.DEPLOY_PACKAGE_NAME} créée."


    # --- MODIFIÉ : Déployer l'archive ZIP ---
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'airparadis-sentiment-api'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # Déployer l'archive ZIP créée à l'étape précédente
        package: '${{ env.DEPLOY_PACKAGE_NAME }}' # Utiliser le nom de l'archive