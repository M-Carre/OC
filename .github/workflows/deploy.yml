# .github/workflows/deploy.yml
name: Deploy Python FastAPI App to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Définir des variables d'environnement pour le workflow
env:
  PYTHON_VERSION: '3.11'
  VENV_NAME: 'antenv' # Nom du venv
  # Chemin du venv DANS le runner (utilisé par les étapes run)
  # Note: Pas besoin de le définir ici car on le construit dans les étapes
  API_SOURCE_DIR: '${{ github.workspace }}/api' # Chemin vers le code source API

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # --- MODIFIÉ : Création et Activation VENV ---
    - name: Create and activate virtual environment
      run: |
        python -m venv $VENV_NAME # Utiliser $VENV_NAME
        # Pas besoin d'activer ici, on le fera dans chaque étape run si nécessaire
        # source $VENV_NAME/bin/activate # Commenté
        # Installer pip/wheel DANS le venv créé
        $VENV_NAME/bin/python -m pip install --upgrade pip wheel

    # --- MODIFIÉ : Installation dans le VENV ---
    - name: Install dependencies into virtual environment
      run: |
        # Utiliser le python/pip du venv directement
        $VENV_NAME/bin/pip install -r $API_SOURCE_DIR/requirements.txt

    # --- MODIFIÉ : Téléchargement spaCy ---
    - name: Download spaCy language model
      run: |
        # Utiliser le python du venv
        $VENV_NAME/bin/python -m spacy download en_core_web_sm

    # --- MODIFIÉ : Lister les fichiers (ajuster chemins venv) ---
    - name: List files and venv contents
      run: |
        echo "--- Listing Root Directory (${{ github.workspace }}) ---"
        ls -lR ${{ github.workspace }}
        echo "---------------------------------------"
        echo "--- Listing API Directory ($API_SOURCE_DIR) ---"
        ls -lR $API_SOURCE_DIR
        echo "---------------------------------------"
        echo "--- Listing VENV bin ($VENV_NAME/bin) ---"
        ls -l $VENV_NAME/bin || echo "Venv bin directory not found or empty" # Ajouter fallback
        echo "---------------------------------------"

    # --- MODIFIÉ : Exécution des tests dans VENV ---
    - name: Run tests
      run: |
         # Activer OU utiliser le pytest du venv
         # source $VENV_NAME/bin/activate # Option 1: Activer
         # pytest $API_SOURCE_DIR/tests/
         # Option 2 (souvent plus robuste en CI): Utiliser chemin direct
         $VENV_NAME/bin/pytest $API_SOURCE_DIR/tests/

    # --- Déploiement (package: '.') ---
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'airparadis-sentiment-api'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # Déployer la racine pour qu'Oryx détecte requirements.txt
        package: '.'